📦 files 🏠

📦 time 🏠
📦 keyboard 🏠


💭 delay timer
🐇 ⌛ 🍇
    🖍🆕 val 🔢 ⬅️ 0
    🖍🆕 prevTime 🔢 ⬅️ 🤜⌚🐇⏳❗️✖3➗50🤛

    💭 set time
    ❗🤬 newtime 🔢 🍇
        newtime ➡️ 🖍 val
    🍉

    💭 ❗ 📥 ➡️ 🔢 🍇
    💭     ↩️val
    💭 🍉

    💭 method to actually time
    ❗ 😴 ➡️ 🔢 🍇
        💭 get the curTime from c++
        ⌚🐇⏳❗️✖3➗50 ➡️ curTime

        curTime➖prevTime ➡️ delta

        val➖delta ➡️ 🖍 val

        ↪️ 0 ▶ val🍇
            0 ➡️ 🖍 val
        🍉

        curTime ➡️ 🖍 prevTime

        ↩️ val
    🍉

    🆕 🍇 🍉
🍉

🐇 🎱 🍇

    💭 stack!!!!!
    💭 🖍🆕 stackBase 🔢 ⬅️ 0xEA0
    🖍🆕 stackPtr 🔢 ⬅️ 0xEA0

    💭 registers
    🖍🆕 V 🍨🐚🔢🍆 ⬅️ 🆕 🍨 🐚🔢🍆 0 0x10❗️
    🖍🆕 PC 🔢 ⬅️ 0
    🖍🆕 I  🔢 ⬅️ 0

    🖍🆕 opcode 🔢 ⬅️ 0

    🖍🆕 timer ⌛ ⬅️ 🆕⌛❗

    🖍🆕 display 🍨🐚🍨🐚🔡🍆🍆 ⬅️ 🆕 🍨 🐚🍨🐚🔡🍆🍆 🆕 🍨 🐚🔡🍆 🔤  🔤 64 ❗️ 32 ❗️

    💭 memory
    💭 4096 (0x1000) bytes of memory
    💭 program begins at 512 (0x200)
    💭 the 96 bytes (0xEA0-0xEFF) for the call stack, internal use, and other variables
    💭 uppermost 256 bytes (0xF00-0xFFF) for display refresh
    🖍🆕 memory 🍨🐚🔢🍆 ⬅️ 🆕 🍨 🐚🔢🍆 0 0x1000❗️ 

    💭 writing file to memory
    ❗ 💋 filename 🔡 🍇
        🍺🆕📄▶️📜 filename❗ ➡️ rom

        0 ➡️ 🖍🆕 i
        👍 ➡️ 🖍🆕 loop
        🔁 loop 🍇
            💭 😀🔤🧲i🧲🔤❗
            🔛rom i❗️
            🆗 bindata 📓rom 1❗ 🍇
                🔢🐽bindata 0❗❗ ➡️ byte

                ↪️ byte ▶🙌 0 🍇
                    byte ➡️ 🐽memory 🤜0x200➕i🤛❗
                🍉
                🙅 🍇
                    byte➕0x100 ➡️ 🐽memory 🤜0x200➕i🤛❗
                🍉


                i ⬅️➕ 1
            🍉
            🙅 error 🍇
                👎 ➡️ 🖍 loop
                🚪rom❗
            🍉
        🍉
        
        💭 🐽memory 0x205❗ ➡️ hello
        💭 💭 🐽 memory 0x200❗

        💭 😀 🔤🧲hello🧲🔤❗
    🍉

    💭 run
    ❗🏃‍♀️🍇
        0x200 ➡️ 🖍 PC

        👍 ➡️ 🖍🆕 loop
        🔁 loop 🍇

            🐽memory PC❗ ➡️ opcodeHigh
            🐽memory 🤜PC➕1🤛❗ ➡️ opcodeLow 

            🤜opcodeHigh👈8🤛➕opcodeLow ➡️ 🖍 opcode

            💭 for debug
            💭 😀 🔤main: 🧲opcode🧲🔤❗️
            
            ⚙❗

            🧹🐇⌨️❗

            🔂 line display 🍇
                🔂 char line 🍇
                    ✍🐇⌨️char❗️
                    💭 👄 char❗️
                🍉

                🗽🐇⌨️❗️
                💭 😀 🔤🔤❗️
            🍉

            🐃🐇⌨️❗

            ❄🐇⏳10000❗

            PC➕2 ➡️ 🖍PC
        🍉
    🍉
    💭 decode opcodes
    ❗ ⚙ 🍇
        💭 most significant nibble 😳
        opcode👉12 ➡️ MSN

        🤜opcode 👉8🤛 🚮 0x10 ➡️ X
        🤜opcode 👉4🤛 🚮 0x10 ➡️ Y
        
        opcode🚮 0x1000 ➡️ NNN
        opcode🚮 0x100 ➡️ NN
        opcode🚮 0x10 ➡️ N

        ↪️ MSN 🙌 0x0 🍇
            💭 least significant byte (boon)
            opcode🚮0x100 ➡️ LSB
            ↪️ LSB 🙌 0xE0 🍇
                💭 clear the display
                🔂 line 🆕⏩ 0 32❗ 🍇
                    🔂 char 🆕⏩ 0 64❗ 🍇
                        🔤  🔤 ➡️ 🐽🐽display line❗ char❗
                    🍉
                🍉
            🍉
            🙅↪️ LSB 🙌 0xEE 🍇
                💭 return from a subroutine
                🤜🐽memory 🤜stackPtr➕1🤛❗👈8🤛 ➕ 🐽memory stackPtr❗ ➡️ 🖍PC
                stackPtr➖2 ➡️ 🖍stackPtr
            🍉
            🙅 🍇
                😀🔤real bad has happen 😱 0x0XYZ🔤❗
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x1 🍇
            💭 jump to location NNN
            NNN➖2 ➡️ 🖍 PC
        🍉
        
        🙅↪️ MSN 🙌 0x2 🍇
            💭 call subroutine at location NNN
            stackPtr➕1 ➡️ 🖍stackPtr
            PC🚮0x100 ➡️ 🐽memory stackPtr❗
            PC👉8 ➡️ 🐽memory 🤜stackPtr➕1🤛❗
            NNN ➡️ 🖍PC
        🍉
        
        🙅↪️ MSN 🙌 0x3 🍇
            💭 skip next instruction if Vx == NN
            ↪️ 🐽V X❗ 🙌 NN 🍇
                PC➕2 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x4 🍇
            💭 skip next instruction if Vx != NN
            ↪️ ❎🐽V X❗ 🙌 NN❗ 🍇
                PC➕2 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x5 🍇
            💭 skip next instruction if Vx == Vy
            ↪️ 🐽V X❗ 🙌 🐽V Y❗ 🍇
                PC➕2 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x6 🍇
            💭 write Vx = NN
            NN ➡️ 🐽V X❗
        🍉
        
        🙅↪️ MSN 🙌 0x7 🍇
            💭 write Vx += NN
            🐽V X❗➕NN ➡️ 🐽V X❗
        🍉

        🙅↪️ MSN 🙌 0x8 🍇
            💭 least significant nibble (boon)
            opcode🚮0x10 ➡️ LSN
            
            ↪️ LSN 🙌 0x0 🍇
                💭 set Vx to Vy
                🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x1 🍇
                💭 set Vx to Vx OR Vy (bitwise OR)
                🐽V X❗ 💢 🐽V Y❗ ➡️ 🐽V X❗
            🍉
            
            🙅↪️ LSN 🙌 0x2 🍇
                💭 set Vx to Vx AND Vy (bitwise AND)
                🐽V X❗ ⭕ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x3 🍇
                💭 set Vx to Vx XOR Vy (bitwise XOR)
                🐽V X❗ ❌ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x4 🍇
                💭 add Vy to Vx: Vx += Vy
                🐽V X❗➕ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x5 🍇
                💭 sub Vy from Vx: Vx -= Vy
                🐽V X❗➖ 🐽V Y❗➡️ 🐽V X❗
            🍉
            
            🙅↪️ LSN 🙌 0x6 🍇
                💭 store LSB of Vx in Vf then shift Vx to right by 1
                🐽V X❗ 🚮 0x100
                🐽V X❗👉1 ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x7 🍇
                💭 Vx = Vy - Vx, Vf is set t o0 when there's a borrow and 1 when there isn't
                🐽V Y❗ ➖ 🐽V X❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0xE 🍇
                💭 store MSB of Vx in Vf then shift Vx to left by 1
                🐽V X❗👉15 ➡️ 🐽V 0xF❗
                🐽V X❗👈1 ➡️ 🐽V X❗
            🍉

            🙅 🍇
                💭 bad
                😀🔤real bad has happen 0x8XYZ🔤❗
            🍉
        🍉

        🙅↪️ MSN 🙌 0x9 🍇
            💭 skip next instruction if Vx != Vy
            ↪️ ❎🐽V X❗ 🙌 🐽V Y❗❗ 🍇
                PC ➕ 1 ➡️ 🖍 PC
            🍉
        🍉

        🙅↪️ MSN 🙌 0xA 🍇
            💭 set I = NNN
            NNN ➡️ 🖍 I
        🍉
        
        🙅↪️ MSN 🙌 0xB 🍇
            💭  jump to location NNN + V0
            NNN ➕ 🐽V 0x0❗ ➡️ 🖍 PC
        🍉

        🙅↪️ MSN 🙌 0xC 🍇
            💭  set Vx = random byte AND NN
            🆕🎰❗ ➡️ RNG
            🔢RNG -128 127❗️ ➡️ rb
            rb ⭕ NN ➡️ 🐽V X❗
        🍉
        
        🙅↪️ MSN 🙌 0xD 🍇
            💭 has to do with drawing / display
            N ➡️ height
            🐽V X❗🚮64 ➡️ rX
            🐽V Y❗🚮32 ➡️ rY

            0 ➡️ 🐽V 0xF❗

            0 ➡️ 🖍🆕yy
            rY➕yy ➡️ 🖍🆕y

            🔁 yy ◀ height 🤝 y ◀ 32 🍇
                0 ➡️ 🖍🆕xx
                rX➕xx ➡️ 🖍🆕x
                🐽memory 🤜I➕yy🤛❗ ➡️ 🖍🆕pixel
                🔁 xx ◀ 8 🤝 x ◀ 64  🍇
                    ↪️ ❎🤜pixel ⭕ 0x80🤛 🙌 0❗🍇
                        💭 ▶🙌
                        💭 ◀🙌

                        💭 😀 🔤x: 🧲x🧲, y: 🧲y🧲🔤❗️
                        ↪️ 🐽🐽display y❗ x❗ 🙌 🔤88🔤 🍇
                            1 ➡️ 🐽V 0xF❗
                            🔤  🔤 ➡️ 🐽🐽display y❗ x❗
                        🍉
                        🙅 🍇
                            🔤88🔤 ➡️ 🐽🐽display y❗ x❗
                        🍉
                    🍉

                    pixel👈1 ➡️ 🖍pixel

                    1➕xx ➡️ 🖍xx
                    rX➕xx ➡️ 🖍x
                🍉

                1➕yy ➡️ 🖍yy
                rY➕yy ➡️ 🖍y
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0xE 🍇
            💭 least significant byte (boon)
            opcode🚮0x100 ➡️ LSB
            
            💭 skip next instruction if key with the value of Vx is pressed
            ↪️ LSB 🙌 0x99 🍇
                ↪️ 📌🐇⌨️ 🐽V X❗❗️ 🍇
                    PC➕2 ➡️ 🖍 PC 
                🍉
            🍉

            💭 skip next instruction if key with value of Vx is not pressed
            🙅↪️ LSB 🙌 0xA1 🍇
                ↪️ ❎📌🐇⌨️ 🐽V X❗❗️❗️ 🍇
                    PC➕2 ➡️ 🖍 PC
                🍉
            🍉
            🙅 🍇
                😀🔤real bad has happen 0xEXYZ🔤❗
            🍉
        🍉
        🙅↪️ MSN 🙌 0xF 🍇
            💭 least significant byte (moob boon)
            opcode🚮0x100 ➡️ LSB
            
            💭 set Vx = delay timer
            ↪️ LSB 🙌 0x07 🍇
                💭 🆕⌛ delay_timer
                💭 ⏳delay_timer
                
                😴timer❗ ➡️ 🐽V X❗

            🍉

            💭 wait for keypress and store the value in Vx
            🙅↪️ LSB 🙌 0x0A 🍇
                ⏸🐇⌨️❗️ ➡️ 🐽V X❗
            🍉

            💭 set delay timer = Vx
            🙅↪️ LSB 🙌 0x15 🍇
                🤬timer 🐽V X❗❗
            🍉

            💭 set sound timer = Vx
            🙅↪️ LSB 🙌 0x18 🍇
                💭 just NOP
            🍉

            💭 set I = I + Vx
            🙅↪️ LSB 🙌 0x1E 🍇
                I➕🐽V X❗ ➡️ 🖍 I
            🍉

            💭 set I = location of sprite for digit Vx
            🙅↪️ LSB 🙌 0x29 🍇
                🐽V X❗✖️5 ➡️ 🖍I
            🍉

            💭 store BCD representation of Vx in memory locations I, I+1, and I+2
            🙅↪️ LSB 🙌 0x33 🍇
                🐽V X❗🚮10 ➡️ 🐽memory I❗
                🤜🐽V X❗➗10🤛🚮10 ➡️ 🐽memory 🤜I➕1🤛❗
                🤜🐽V X❗➗100🤛🚮10 ➡️ 🐽memory 🤜I➕2🤛❗
            🍉

            💭 store registers V0 through Vx in memory starting at location I
            🙅↪️ LSB 🙌 0x55 🍇
                🔂 i 🆕⏩ 0 X❗ 🍇
                    🤜🐽memory 🤜I➕i✖2➕1🤛❗👈8🤛 ➕ 🐽memory 🤜I➕i✖2🤛❗ ➡️ 🐽V i❗
                🍉
            🍉

            💭 read registers V0 through Vx from memory starting at location I
            🙅↪️ LSB 🙌 0x65 🍇
                🔂 i 🆕⏩ 0 X❗ 🍇
                    🐽V i❗🚮0x100 ➡️ 🐽memory 🤜I➕i✖2🤛❗
                    🐽V i❗👉8 ➡️ 🐽memory 🤜I➕i✖2➕1🤛❗
                🍉
            🍉

            🙅 🍇
                😀🔤real bad has happen 0xFXYZ🔤❗
            🍉
        🍉
        🙅 🍇
            😀🔤real bad has happen 0xWXYZ🔤❗
        🍉
    🍉

    💭 moob boon (translation: constructor)
    🆕 🍇
        🍿 0xF0 0x90 0x90 0x90 0xF0 0x20 0x60 0x20 0x20 0x70 0xF0 0x10 0xF0 0x80 0xF0 0xF0 0x10 0xF0 0x10 0xF0 0x90 0x90 0xF0 0x10 0x10 0xF0 0x80 0xF0 0x10 0xF0 0xF0 0x80 0xF0 0x90 0xF0 0xF0 0x10 0x20 0x40 0x40 0xF0 0x90 0xF0 0x90 0xF0 0xF0 0x90 0xF0 0x10 0xF0 0xF0 0x90 0xF0 0x90 0x90 0xE0 0x90 0xE0 0x90 0xE0 0xF0 0x80 0x80 0x80 0xF0 0xE0 0x90 0x90 0x90 0xE0 0xF0 0x80 0xF0 0x80 0xF0 0xF0 0x80 0xF0 0x80 0x80 🍆 ➡️ font
        📏font❓ ➡️ len

        🔂 i 🆕⏩ 0 len❗ 🍇
            🐽font i❗ ➡️ 🐽memory i❗
        🍉

    🍉
🍉

🏁 🍇

    💭 keyboard
    🤚🐇⌨️❗️



    🆕🎱❗ ➡️ chip8 

    🎞️🐇💻❗ ➡️ args

    💭 💋chip8 🔤./roms/IBM.ch8🔤❗
    💭 💋chip8 🔤./roms/Pong (alt).ch8🔤❗
    💋chip8 🐽args 1❗❗

    🏃‍♀️chip8❗

    😈🐇⌨️❗️




    
    💭 Timer
    💭 🕘🐇🀄❗ ➡️ hello
    💭 😀 🔤🧲hello🧲🔤❗️

    💭  testing timer shenanigans
    💭 🎙🐇🐱❗️
    💭 ⌚🐇⏳❗️✖3➗50 ➡️ boblov
    💭 😀 🔤🧲boblov🧲🔤❗️

    💭 still the timer
    💭 🆕⌛❗ ➡️ moobboon
    💭 🤬moobboon 500❗
    💭 🔂 i 🆕⏩ 0 10000000❗ 🍇🍉
    💭 😴moobboon❗ ➡️ ticks
    💭 😀 🔤🧲ticks🧲🔤❗️

💭     💭 display in terminal
💭     🆕 🍨 🐚🔡🍆 🔤██🔤 64 ❗️ ➡️ line
💭     🆕 🍨 🐚🍨🐚🔡🍆🍆 line 32 ❗️ ➡️ 🖍🆕box

💭     💭 🔤  🔤 ➡️ 🐽🐽box 2❗ 2❗ modify pixels

💭     🔂 line box 🍇
💭         🔂 char line 🍇
💭             👄 char❗️
💭         🍉
💭         😀 🔤🔤❗️
💭     🍉

💭   🕴🐇💻 🔤clear🔤❗
🍉