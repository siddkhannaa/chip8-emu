📦 files 🏠
📦 time 🏠

💭 delay timer
🐇 ⌛ 🍇
    🖍🆕 val 🔢 ⬅️ 0
    🖍🆕 prevTime 🔢 ⬅️ 🤜⌚🐇⏳❗️✖3➗50🤛

    💭 set time
    ❗🤬 newtime 🔢 🍇
        newtime ➡️ 🖍 val
    🍉

    💭 ❗ 📥 ➡️ 🔢 🍇
    💭     ↩️val
    💭 🍉

    💭 method to actually time
    ❗ 😴 ➡️ 🔢 🍇
        💭 get the curTime from c++
        ⌚🐇⏳❗️✖3➗50 ➡️ curTime

        curTime➖prevTime ➡️ delta

        val➖delta ➡️ 🖍 val

        ↪️ 0 ▶ val🍇
            0 ➡️ 🖍 val
        🍉

        curTime ➡️ 🖍 prevTime

        ↩️ val
    🍉

    🆕 🍇 🍉
🍉

🐇 🎱 🍇
    💭 registers
    🖍🆕 V 🍨🐚🔢🍆 ⬅️ 🆕 🍨 🐚🔢🍆 0 0x10❗️
    🖍🆕 PC 🔢 ⬅️ 0
    🖍🆕 I  🔢 ⬅️ 0

    🖍🆕 opcode 🔢 ⬅️ 0

    💭 memory
    💭 4096 (0x1000) bytes of memory
    💭 program begins at 512 (0x200)
    💭 the 96 bytes (0xEA0-0xEFF) for the call stack, internal use, and other variables
    💭 uppermost 256 bytes (0xF00-0xFFF) for display refresh
    🖍🆕 memory 🍨🐚💧🍆 ⬅️ 🆕 🍨 🐚💧🍆 0 0x1000❗️ 

    💭 writing file to memory
    ❗ 💋 filename 🔡 🍇
        🍺🆕📄▶️📜 filename❗ ➡️ rom

        0 ➡️ 🖍🆕 i
        👍 ➡️ 🖍🆕 loop
        🔁 loop 🍇
            😀🔤🧲i🧲🔤❗
            🔛rom i❗️
            🆗 bindata 📓rom 1❗ 🍇
                🐽bindata 0❗ ➡️ 🐽memory 🤜0x200➕i🤛❗
                i ⬅️➕ 1
            🍉
            🙅 error 🍇
                👎 ➡️ 🖍 loop
                🚪rom❗
            🍉
        🍉
        
        💭 🐽memory 0x205❗ ➡️ hello
        💭 💭 🐽 memory 0x200❗

        💭 😀 🔤🧲hello🧲🔤❗
    🍉

    💭 run
    ❗🏃‍♀️🍇
        0x200 ➡️ 🖍 PC

        👍 ➡️ 🖍🆕 loop
        🔁 loop 🍇
            🔢 🐽memory PC❗❗ ➡️ opcodeLow
            🔢 🐽memory 🤜PC➕1🤛❗❗ ➡️ opcodeHigh

            🤜opcodeHigh👈8🤛➕opcodeLow ➡️ 🖍 opcode
            
            ⚙❗
        🍉
    🍉
    💭 decode opcodes
    ❗ ⚙ 🍇
        💭 most significant nibble 😳
        opcode👉12 ➡️ MSN

        🤜opcode 👉8🤛 🚮 0x10 ➡️ X
        🤜opcode 👉4🤛 🚮 0x10 ➡️ Y
        
        opcode🚮 0x1000 ➡️ NNN
        opcode🚮 0x100 ➡️ NN
        opcode🚮 0x10 ➡️ N

        ↪️ MSN 🙌 0x0 🍇
            💭 least significant byte (boon)
            opcode🚮0x100 ➡️ LSB
            ↪️ LSB 🙌 0xE0 🍇
                💭 clear the display
            🍉
            🙅↪️ MSN 🙌 0xEE 🍇
                💭 return from a subroutine
            🍉
            🙅 🍇
                😀🔤real bad has happen 😱 0x0XYZ🔤❗
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x1 🍇
            💭 jump to location NNN
            NNN ➡️ 🖍 PC
        🍉
        
        🙅↪️ MSN 🙌 0x2 🍇
            💭 call subroutine at location NNN
        🍉
        
        🙅↪️ MSN 🙌 0x3 🍇
            💭 skip next instruction if Vx == NN
            ↪️ 🐽V X❗ 🙌 NN 🍇
                PC➕1 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x4 🍇
            💭 skip next instruction if Vx != NN
            ↪️ ❎🐽V X❗ 🙌 NN❗ 🍇
                PC➕1 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x5 🍇
            💭 skip next instruction if Vx == Vy
            ↪️ 🐽V X❗ 🙌 🐽V Y❗ 🍇
                PC➕1 ➡️ 🖍 PC
            🍉
        🍉
        
        🙅↪️ MSN 🙌 0x6 🍇
            💭 write Vx = NN
            NN ➡️ 🐽V X❗
        🍉
        
        🙅↪️ MSN 🙌 0x7 🍇
            💭 write Vx += NN
            🐽V X❗➕NN ➡️ 🐽V X❗
        🍉

        🙅↪️ MSN 🙌 0x8 🍇
            💭 least significant nibble (boon)
            opcode🚮0x10 ➡️ LSN
            
            ↪️ LSN 🙌 0x0 🍇
                💭 set Vx to Vy
                🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x1 🍇
                💭 set Vx to Vx OR Vy (bitwise OR)
                🐽V X❗ 💢 🐽V Y❗ ➡️ 🐽V X❗
            🍉
            
            🙅↪️ LSN 🙌 0x2 🍇
                💭 set Vx to Vx AND Vy (bitwise AND)
                🐽V X❗ ⭕ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x3 🍇
                💭 set Vx to Vx XOR Vy (bitwise XOR)
                🐽V X❗ ❌ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x4 🍇
                💭 add Vy to Vx: Vx += Vy
                🐽V X❗➕ 🐽V Y❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x5 🍇
                💭 sub Vy from Vx: Vx -= Vy
                🐽V X❗➖ 🐽V Y❗➡️ 🐽V X❗
            🍉
            
            🙅↪️ LSN 🙌 0x6 🍇
                💭 store LSB of Vx in Vf then shift Vx to right by 1
                🐽V X❗ 🚮 0x100
                🐽V X❗👉1 ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0x7 🍇
                💭 Vx = Vy - Vx, Vf is set t o0 when there's a borrow and 1 when there isn't
                🐽V Y❗ ➖ 🐽V X❗ ➡️ 🐽V X❗
            🍉

            🙅↪️ LSN 🙌 0xE 🍇
                💭 store MSB of Vx in Vf then shift Vx to left by 1
                🐽V X❗👉15 ➡️ 🐽V 0xF❗
                🐽V X❗👈1 ➡️ 🐽V X❗
            🍉

            🙅 🍇
                💭 bad
                😀🔤real bad has happen 0x8XYZ🔤❗
            🍉
        🍉

        🙅↪️ MSN 🙌 0x9 🍇
            💭 skip next instruction if Vx != Vy
            ↪️ ❎🐽V X❗ 🙌 🐽V Y❗❗ 🍇
                PC ➕ 1 ➡️ 🖍 PC
            🍉
        🍉

        🙅↪️ MSN 🙌 0xA 🍇
            💭 set I = NNN
            NNN ➡️ 🖍 I
        🍉
        
        🙅↪️ MSN 🙌 0xB 🍇
            💭  jump to location NNN + V0
            NNN ➕ 🐽V 0x0❗ ➡️ 🖍 PC
        🍉

        🙅↪️ MSN 🙌 0xC 🍇
            💭  set Vx = random byte AND NN
            🆕🎰❗ ➡️ RNG
            🔢RNG -128 127❗️ ➡️ rb
            rb ⭕ NN ➡️ 🖍 PC
        🍉
        
        🙅↪️ MSN 🙌 0xD 🍇
            💭 has to do with drawing / display
        🍉
        
        🙅↪️ MSN 🙌 0xE 🍇
            💭 least significant byte (boon)
            opcode🚮0x100 ➡️ LSB
            
            💭 skip next instruction if key with the value of Vx is pressed
            ↪️ LSB 🙌 0x99 🍇

            🍉

            💭 skip next instruction if key with value of Vx is not pressed
            🙅↪️ LSB 🙌 0xA1 🍇

            🍉
            🙅 🍇
                😀🔤real bad has happen 0xEXYZ🔤❗
            🍉
        🍉
        🙅↪️ MSN 🙌 0xF 🍇
            💭 least significant byte (moob boon)
            opcode🚮0x100 ➡️ LSB
            
            💭 set Vx = delay timer
            ↪️ LSB 🙌 0x07 🍇
                💭 🆕⌛ delay_timer
                💭 ⏳delay_timer
                

            🍉

            💭 wait for keypress and store the value in Vx
            🙅↪️ LSB 🙌 0x0A 🍇

            🍉

            💭 set delay timer = Vx
            🙅↪️ LSB 🙌 0x15 🍇

            🍉

            💭 set sound timer = Vx
            🙅↪️ LSB 🙌 0x18 🍇

            🍉

            💭 set I = I + Vx
            🙅↪️ LSB 🙌 0x1E 🍇
                I➕🐽V X❗ ➡️ 🖍 I
            🍉

            💭 set I = location of sprite for digit Vx
            🙅↪️ LSB 🙌 0x29 🍇

            🍉

            💭 ???
            🙅↪️ LSB 🙌 0x33 🍇

            🍉

            💭 store registers V0 through Vx in memory starting at location I
            🙅↪️ LSB 🙌 0x55 🍇
                🔂 i 🆕⏩ 0 X❗ 🍇
                    🤜🔢 🐽memory 🤜I➕i✖2➕1🤛❗❗👈8🤛 ➕ 🔢🐽memory 🤜I➕i✖2🤛❗❗ ➡️ 🐽V i❗
                🍉
            🍉

            💭 read registers V0 through Vx from memory starting at location I
            🙅↪️ LSB 🙌 0x65 🍇
                🔂 i 🆕⏩ 0 X❗ 🍇
                    💧🐽V i❗🚮0x100❗ ➡️ 🐽memory 🤜I➕i✖2🤛❗
                    💧🐽V i❗👉8❗ ➡️ 🐽memory 🤜I➕i✖2➕1🤛❗
                🍉
            🍉

            🙅 🍇
                😀🔤real bad has happen 0xFXYZ🔤❗
            🍉
        🍉
        🙅 🍇
            😀🔤real bad has happen 0xWXYZ🔤❗
        🍉
    🍉

    💭 moob boon (translation: constructor)
    🆕 🍇 🍉
🍉

🏁 🍇

    💭 🕘🐇🀄❗ ➡️ hello
    💭 😀 🔤🧲hello🧲🔤❗️

    
    💭 🎙🐇🐱❗️
    💭 ⌚🐇⏳❗️✖3➗50 ➡️ boblov
    💭 😀 🔤🧲boblov🧲🔤❗️

    🆕⌛❗ ➡️ moobboon
    🤬moobboon 500❗
    🔂 i 🆕⏩ 0 10000000❗ 🍇🍉
    😴moobboon❗ ➡️ ticks
    😀 🔤🧲ticks🧲🔤❗️



    💭 🆕🎱❗ ➡️ chip8 

    💭 💋chip8 🔤./roms/Pong (alt).ch8🔤❗





    💭 💭 display in terminal
    💭 🆕 🍨 🐚🔡🍆 🔤██🔤 64 ❗️ ➡️ line
    💭 🆕 🍨 🐚🍨🐚🔡🍆🍆 line 32 ❗️ ➡️ 🖍🆕box

    💭 💭 🔤  🔤 ➡️ 🐽🐽box 2❗ 2❗ modify pixels

    💭 🔂 line box 🍇
    💭     🔂 char line 🍇
    💭         👄 char❗️
    💭     🍉
    💭     😀 🔤🔤❗️
    💭 🍉

💭   🕴🐇💻 🔤clear🔤❗
🍉